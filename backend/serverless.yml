service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    TODOS_TABLE: Todos-table-${self:provider.stage}
    TODOS_INDEX_NAME: TodosIndex
    #IMAGE_ID_INDEX: ImageIdIndex
    #CONNECTIONS_TABLE: Connections-${self:provider.stage}
    #IMAGES_S3_BUCKET: serverless-udagram-images-${self:provider.stage}
    #SIGNED_URL_EXPIRATION: 300
    #THUMBNAILS_S3_BUCKET: serverless-udagram-thumbnail-${self:provider.stage}
    #AUTH_0_SECRET_ID: Auth0Secret-${self:provider.stage}
    #AUTH_0_SECRET_FIELD: auth0Secret
  
  iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamoDb:Scan
          - dynamodb:GetItem
        Resource:
          - "Fn::GetAtt": [TodosTable, Arn]
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.TODOS_INDEX_NAME}
          #- "Fn::Join": ['/', ["Fn::GetAtt": [ TodosTable, Arn ], 'index', ${self:custom.TODOS_INDEX_NAME}]]

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    
  # # TODO: Configure this function
  # CreateTodo:
  #   handler: src/lambda/http/createTodo.handler
  #   events:
  #     - http:
  #         method: post
  #         path: todos

  # # TODO: Configure this function
  # UpdateTodo:
  #   handler: src/lambda/http/updateTodo.handler
  #   events:
  #     - http:
  #         method: patch
  #         path: todos/{todoId}

  # # TODO: Configure this function
  # DeleteTodo:
  #   handler: src/lambda/http/deleteTodo.handler
  #   events:
  #     - http:
  #         method: delete
  #         path: todos/{todoId}

  # # TODO: Configure this function
  # GenerateUploadUrl:
  #   handler: src/lambda/http/generateUploadUrl.handler
  #   events:
  #     - http:
  #         method: post
  #         path: todos/{todoId}/attachment

resources:
  Resources:
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: todoId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_INDEX_NAME}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
