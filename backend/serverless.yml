service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    TODOS_TABLE: Todos-table-${self:provider.stage}
    TODOS_INDEX_NAME: TodosIndex
    #IMAGE_ID_INDEX: ImageIdIndex
    #CONNECTIONS_TABLE: Connections-${self:provider.stage}
    #IMAGES_S3_BUCKET: serverless-udagram-images-${self:provider.stage}
    #SIGNED_URL_EXPIRATION: 300
    #THUMBNAILS_S3_BUCKET: serverless-udagram-thumbnail-${self:provider.stage}
    #AUTH_0_SECRET_ID: Auth0Secret-${self:provider.stage}
    #AUTH_0_SECRET_FIELD: auth0Secret
  
  iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamoDb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
        Resource:
          - "Fn::GetAtt": [TodosTable, Arn]
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.TODOS_INDEX_NAME}
          #- "Fn::Join": ['/', ["Fn::GetAtt": [ TodosTable, Arn ], 'index', ${self:custom.TODOS_INDEX_NAME}]]

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Udagram API
        description: Serverless application for images sharing
    models:
      - name: CreateTodoRequest
        contentType: application/json
        schema: ${file(models/create-todo-request.json)}
      - name: UpdateTodoRequest
        contentType: application/json
        schema: ${file(models/update-todo-request.json)}


functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/create-todo-request.json)} 
          documentation:
            summary: Create a new ToDo-Item
            description: Create a new TodoItem
            requestModels:
              'application/json': CreateTodoRequest

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          #request:
          #  schemas:
          #    application/json: ${file(models/update-todo-request.json)} 
          #  parameters:
          #    paths:
          #      todoId: true
          #documentation:
          #  summary: Update an existing ToDo-Item
          #  description: Create a new TodoItem
          #  requestModels:
          #s    'application/json': UpdateTodoRequest

  # # TODO: Configure this function
  # DeleteTodo:
  #   handler: src/lambda/http/deleteTodo.handler
  #   events:
  #     - http:
  #         method: delete
  #         path: todos/{todoId}

  # # TODO: Configure this function
  # GenerateUploadUrl:
  #   handler: src/lambda/http/generateUploadUrl.handler
  #   events:
  #     - http:
  #         method: post
  #         path: todos/{todoId}/attachment

resources:
  Resources:
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: todoId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_INDEX_NAME}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
